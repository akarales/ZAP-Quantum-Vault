import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { invoke } from '@tauri-apps/api/core';
import { listen } from '@tauri-apps/api/event';
import { 
  ArrowLeft, 
  HardDrive, 
  Loader2, 
  Lock, 
  Unlock, 
  CheckCircle, 
  XCircle, 
  AlertTriangle, 
  Download, 
  Settings, 
  Zap, 
  Eye, 
  EyeOff 
} from 'lucide-react';
import { Button } from '../components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Badge } from '../components/ui/badge';
import { Progress } from '../components/ui/progress';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from '../components/ui/dialog';
import { Alert, AlertDescription } from '../components/ui/alert';
import { UsbDrive } from '../types/usb';
import { MountButton } from '../components/mount/MountButton';
import { ErrorBoundary } from '../components/ui/ErrorBoundary';
import { PasswordGeneratorCompact } from '../components/password/PasswordGeneratorCompact';

// Type definitions
interface FormatProgress {
  stage: string;
  progress: number;
  message: string;
  isActive: boolean;
}

// Components
const LoadingSpinner = ({ size = 'md' }: { size?: 'sm' | 'md' | 'lg' }) => (
  <Loader2 className={`animate-spin ${size === 'sm' ? 'w-4 h-4' : size === 'lg' ? 'w-8 h-8' : 'w-6 h-6'}`} />
);

const EncryptionBadge = ({ isEncrypted }: { isEncrypted: boolean }) => (
  <Badge variant={isEncrypted ? 'default' : 'secondary'} className="flex items-center gap-1">
    {isEncrypted ? <Lock className="w-3 h-3" /> : <Unlock className="w-3 h-3" />}
    {isEncrypted ? 'Encrypted' : 'Unencrypted'}
  </Badge>
);

const UsbDriveDetailPage: React.FC = () => {
  const { driveId } = useParams<{ driveId: string }>();
  const navigate = useNavigate();
  
  const [drive, setDrive] = useState<UsbDrive | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  const [operationInProgress, setOperationInProgress] = useState(false);
  
  // Dialog states
  const [showBackupDialog, setShowBackupDialog] = useState(false);
  const [showTrustDialog, setShowTrustDialog] = useState(false);
  const [showFormatSection, setShowFormatSection] = useState(false);
  
  const [formatProgress, setFormatProgress] = useState<FormatProgress | null>(null);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  
  // Form states
  const [formatOptions, setFormatOptions] = useState({
    drive_name: 'My Quantum Encrypted Drive',
    password: '',
    confirm_password: '',
    encryption_type: 'basic_luks2',
    key_derivation: 'argon2id',
    quantum_entropy: true,
    secure_erase_passes: 3,
    filesystem: 'ext4',
    compression: true,
    forward_secrecy: true,
    zero_knowledge_proof: true,
    backup_keys: true,
    quantum_algorithm: 'kyber1024',
    post_quantum_signature: 'dilithium5',
    quantum_key_distribution: false,
    airgap_mode: false
  });

  // Load user info from auth token
  const loadUserInfo = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (token) {
        const userInfo = await invoke<{ user_id: string }>('verify_token', { token });
        setCurrentUserId(userInfo.user_id);
      }
    } catch (error) {
      console.warn('Failed to load user info:', error);
    }
  };

  // Load drive data
  const loadDriveData = async () => {
    if (!driveId) return;
    
    try {
      setLoading(true);
      const driveData = await invoke<UsbDrive>('get_drive_details', { driveId });
      setDrive(driveData);
    } catch (err) {
      setError(err as string);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadUserInfo();
    loadDriveData();
  }, [driveId]);

  // Event listeners for progress updates
  useEffect(() => {
    const unlistenFormat = listen('format_progress', (event: any) => {
      console.log('Format progress event received:', event.payload);
      const { stage, progress, message } = event.payload;
      setFormatProgress({
        stage: stage || 'processing',
        progress: progress || 0,
        message: message || 'Processing...',
        isActive: progress < 100
      });
    });

    return () => {
      unlistenFormat.then(fn => fn());
    };
  }, []);

  const handleMountSuccess = (mountPoint: string) => {
    setSuccess(`Drive mounted successfully at ${mountPoint}`);
    setError('');
    // Optimistic update - immediately update drive state
    if (drive) {
      setDrive(prev => prev ? { ...prev, mount_point: mountPoint } : null);
    }
  };

  const handleMountError = (error: string) => {
    setError(error);
    setSuccess('');
  };

  const handleUnmountSuccess = () => {
    setSuccess('Drive unmounted successfully');
    setError('');
    // Optimistic update - immediately update drive state
    if (drive) {
      setDrive(prev => prev ? { ...prev, mount_point: null } : null);
    }
  };

  const handleFormatDrive = async () => {
    console.log('Starting format drive operation');
    if (!drive || !formatOptions.password || formatOptions.password !== formatOptions.confirm_password) {
      setError('Please ensure passwords match and all fields are filled');
      return;
    }

    setOperationInProgress(true);
    setError('');
    setSuccess('');

    try {
      setFormatProgress({
        stage: 'starting',
        progress: 0,
        message: 'Initializing encryption process...',
        isActive: true
      });

      console.log('Invoking format_and_encrypt_drive command');
      const result = await invoke('format_and_encrypt_drive', {
        driveId: drive.id,
        password: formatOptions.password,
        driveName: formatOptions.drive_name
      });

      console.log('Format operation completed:', result);
      setSuccess(result as string);
      setShowFormatSection(false);
      
      // Reload drive data to reflect changes
      setTimeout(() => {
        loadDriveData();
      }, 2000);

    } catch (error) {
      console.error('Format operation failed:', error);
      setError(`Format operation failed: ${error}`);
    } finally {
      setOperationInProgress(false);
      setTimeout(() => {
        setFormatProgress(prev => prev ? {
          ...prev,
          isActive: false
        } : null);
      }, 1000);
    }
  };

  const validatePassword = (password: string) => {
    const hasLength = password.length >= 8;
    const hasUpper = /[A-Z]/.test(password);
    const hasLower = /[a-z]/.test(password);
    const hasNumber = /\d/.test(password);
    const hasSpecial = /[!@#$%^&*(),.?":{}|<>]/.test(password);
    
    const score = [hasLength, hasUpper, hasLower, hasNumber, hasSpecial].filter(Boolean).length;
    
    return {
      entropy: score >= 4,
      score,
      feedback: score < 4 ? 'Password should be at least 8 characters with uppercase, lowercase, numbers, and symbols' : 'Strong password'
    };
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <LoadingSpinner size="lg" />
        <span className="ml-3 text-lg">Loading drive details...</span>
      </div>
    );
  }

  if (!drive) {
    return (
      <div className="container mx-auto p-6">
        <div className="text-center">
          <AlertTriangle className="w-16 h-16 mx-auto text-red-500 mb-4" />
          <h1 className="text-2xl font-bold mb-2">Drive Not Found</h1>
          <p className="text-muted-foreground mb-4">
            The requested USB drive could not be found.
          </p>
          <Button onClick={() => navigate('/drives')}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Drives
          </Button>
        </div>
      </div>
    );
  }

  return (
    <ErrorBoundary>
      <div className="container mx-auto p-6 space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Button variant="outline" onClick={() => navigate('/drives')}>
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back
            </Button>
            <div>
              <h1 className="text-3xl font-bold flex items-center gap-3">
                <HardDrive className="w-8 h-8" />
                {drive.label || 'USB Drive'}
              </h1>
              <p className="text-muted-foreground">{drive.device_path}</p>
            </div>
          </div>
          <div className="flex items-center gap-3">
            <EncryptionBadge isEncrypted={drive.is_encrypted} />
            <Badge variant={drive.trust_level === 'trusted' ? 'default' : 'destructive'}>
              {drive.trust_level}
            </Badge>
          </div>
        </div>

        {/* Status Messages */}
        {error && (
          <Card className="border-red-200 bg-red-50">
            <CardContent className="p-4">
              <div className="flex items-center gap-2 text-red-700">
                <XCircle className="w-5 h-5" />
                <span>{error}</span>
              </div>
            </CardContent>
          </Card>
        )}

        {success && (
          <Card className="border-green-200 bg-green-50">
            <CardContent className="p-4">
              <div className="flex items-center gap-2 text-green-700">
                <CheckCircle className="w-5 h-5" />
                <span>{success}</span>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Main Content - Single Page Layout */}
        <div className="space-y-6">

          {/* Drive Information */}
          <Card>
              <CardHeader>
                <CardTitle>Drive Information</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label>Capacity</Label>
                    <p className="text-lg font-medium">
                      {(drive.capacity / (1024 ** 3)).toFixed(2)} GB
                    </p>
                  </div>
                  <div>
                    <Label>Available Space</Label>
                    <p className="text-lg font-medium">
                      {(drive.available_space / (1024 ** 3)).toFixed(2)} GB
                    </p>
                  </div>
                  <div>
                    <Label>Filesystem</Label>
                    <p className="text-lg font-medium">{drive.filesystem}</p>
                  </div>
                  <div>
                    <Label>Mount Point</Label>
                    <p className="text-lg font-medium">
                      {drive.mount_point || 'Not mounted'}
                    </p>
                  </div>
                </div>

                <div className="flex items-center justify-between pt-4 border-t">
                  <div className="space-y-1">
                    <p className="text-sm font-medium">Status</p>
                    <p className="text-sm text-muted-foreground">
                      {drive.mount_point ? 'Mounted and ready' : 'Not mounted'}
                    </p>
                  </div>
                  <MountButton
                    drive={drive}
                    userId={currentUserId || undefined}
                    onMountSuccess={handleMountSuccess}
                    onMountError={handleMountError}
                    onUnmountSuccess={handleUnmountSuccess}
                  />
                </div>
              </CardContent>
            </Card>

          {/* Security Settings */}
          <Card className="bg-gray-50 dark:bg-gray-900 border-gray-200 dark:border-gray-700">
              <CardHeader>
                <CardTitle>Security Settings</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium">Trust Level</p>
                    <p className="text-sm text-muted-foreground">Current trust level: Untrusted</p>
                  </div>
                  <Button variant="outline" onClick={() => setShowTrustDialog(true)}>
                    Manage Trust
                  </Button>
                </div>
                
                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium">Encryption</p>
                    <p className="text-sm text-muted-foreground">
                      Drive is not encrypted
                    </p>
                  </div>
                  <EncryptionBadge isEncrypted={false} />
                </div>
              </CardContent>
          </Card>
                <CardContent className="space-y-4">
                  <div className="bg-orange-50 p-4 rounded border border-orange-200">
                    <div className="flex items-center gap-2 text-orange-700 mb-2">
                      <AlertTriangle className="w-5 h-5" />
                      <span className="font-medium">Warning</span>
                    </div>
                    <p className="text-sm text-orange-600">
                      This will permanently erase all data on the drive and encrypt it with LUKS2.
                    </p>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="drive_name">Drive Name</Label>
                      <Input
                        id="drive_name"
                        value={formatOptions.drive_name}
                        onChange={(e) => setFormatOptions(prev => ({
                          ...prev,
                          drive_name: e.target.value
                        }))}
                        placeholder="My Quantum Encrypted Drive"
                      />
                    </div>
                    <div>
                      <Label htmlFor="encryption_type">Encryption Type</Label>
                      <Select
                        value={formatOptions.encryption_type}
                        onValueChange={(value) => setFormatOptions(prev => ({
                          ...prev,
                          encryption_type: value
                        }))}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="basic_luks2">Basic LUKS2 (Available)</SelectItem>
                          <SelectItem value="quantum_luks2" disabled>Quantum LUKS2 (Coming Soon)</SelectItem>
                          <SelectItem value="post_quantum_aes" disabled>Post-Quantum AES-256 (Coming Soon)</SelectItem>
                          <SelectItem value="hybrid_classical_quantum" disabled>Hybrid Classical+Quantum (Coming Soon)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  {formatOptions.encryption_type !== 'basic_luks2' && (
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="quantum_algorithm">Quantum Algorithm</Label>
                        <Select
                          value={formatOptions.quantum_algorithm}
                          onValueChange={(value) => setFormatOptions(prev => ({
                            ...prev,
                            quantum_algorithm: value
                          }))}
                          disabled
                        >
                          <SelectTrigger className="opacity-50">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="kyber1024">Kyber-1024 (NIST Level 5)</SelectItem>
                            <SelectItem value="kyber768">Kyber-768 (NIST Level 3)</SelectItem>
                            <SelectItem value="kyber512">Kyber-512 (NIST Level 1)</SelectItem>
                            <SelectItem value="ntru_hrss701">NTRU-HRSS-701</SelectItem>
                            <SelectItem value="saber">SABER</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label htmlFor="post_quantum_signature">Digital Signature</Label>
                        <Select
                          value={formatOptions.post_quantum_signature}
                          onValueChange={(value) => setFormatOptions(prev => ({
                            ...prev,
                            post_quantum_signature: value
                          }))}
                          disabled
                        >
                          <SelectTrigger className="opacity-50">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="dilithium5">Dilithium-5 (High Security)</SelectItem>
                            <SelectItem value="dilithium3">Dilithium-3 (Balanced)</SelectItem>
                            <SelectItem value="dilithium2">Dilithium-2 (Fast)</SelectItem>
                            <SelectItem value="falcon1024">FALCON-1024</SelectItem>
                            <SelectItem value="sphincs_sha256">SPHINCS+ SHA-256</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  )}

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="key_derivation">Key Derivation</Label>
                      <Select
                        value={formatOptions.key_derivation}
                        onValueChange={(value) => setFormatOptions(prev => ({
                          ...prev,
                          key_derivation: value
                        }))}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="argon2id">Argon2id (Recommended)</SelectItem>
                          <SelectItem value="argon2i">Argon2i</SelectItem>
                          <SelectItem value="argon2d">Argon2d</SelectItem>
                          <SelectItem value="scrypt">scrypt</SelectItem>
                          <SelectItem value="pbkdf2">PBKDF2</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="filesystem">Filesystem</Label>
                      <Select
                        value={formatOptions.filesystem}
                        onValueChange={(value) => setFormatOptions(prev => ({
                          ...prev,
                          filesystem: value
                        }))}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="ext4">ext4 (Recommended)</SelectItem>
                          <SelectItem value="xfs">XFS</SelectItem>
                          <SelectItem value="btrfs">Btrfs</SelectItem>
                          <SelectItem value="f2fs">F2FS</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="secure_erase_passes">Secure Erase Passes</Label>
                      <Select
                        value={formatOptions.secure_erase_passes.toString()}
                        onValueChange={(value) => setFormatOptions(prev => ({
                          ...prev,
                          secure_erase_passes: parseInt(value)
                        }))}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="1">1 Pass (Fast)</SelectItem>
                          <SelectItem value="3">3 Passes (Balanced)</SelectItem>
                          <SelectItem value="7">7 Passes (Secure)</SelectItem>
                          <SelectItem value="35">35 Passes (DoD 5220.22-M)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* Password Input Section */}
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="password">Encryption Password</Label>
                        <div className="relative">
                          <Input
                            id="password"
                            type={showPassword ? "text" : "password"}
                            value={formatOptions.password}
                            onChange={(e) => setFormatOptions(prev => ({
                              ...prev,
                              password: e.target.value
                            }))}
                            placeholder="Enter strong quantum-resistant password"
                            className="pr-10"
                          />
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                            onClick={() => setShowPassword(!showPassword)}
                          >
                            {showPassword ? (
                              <EyeOff className="h-4 w-4 text-muted-foreground" />
                            ) : (
                              <Eye className="h-4 w-4 text-muted-foreground" />
                            )}
                          </Button>
                        </div>
                        <div className="mt-1 text-xs text-muted-foreground">
                          {validatePassword(formatOptions.password).feedback}
                        </div>
                      </div>
                      <div>
                        <Label htmlFor="confirm_password">Confirm Password</Label>
                        <div className="relative">
                          <Input
                            id="confirm_password"
                            type={showConfirmPassword ? "text" : "password"}
                            value={formatOptions.confirm_password}
                            onChange={(e) => setFormatOptions(prev => ({
                              ...prev,
                              confirm_password: e.target.value
                            }))}
                            placeholder="Confirm password"
                            className="pr-10"
                          />
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                          >
                            {showConfirmPassword ? (
                              <EyeOff className="h-4 w-4 text-muted-foreground" />
                            ) : (
                              <Eye className="h-4 w-4 text-muted-foreground" />
                            )}
                          </Button>
                        </div>
                      </div>
                    </div>

                    {/* Password Generator Section */}
                    <PasswordGeneratorCompact
                      onPasswordGenerated={(password) => {
                        setFormatOptions(prev => ({
                          ...prev,
                          password: password,
                          confirm_password: password
                        }));
                      }}
                    />
                  </div>

                  {/* Advanced Quantum Security Options */}
                  <div className="space-y-4 border-t pt-4">
                    <h4 className="font-medium text-blue-600">🔬 Quantum Security Features</h4>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="quantum_entropy"
                          checked={formatOptions.quantum_entropy}
                          onChange={(e) => setFormatOptions(prev => ({
                            ...prev,
                            quantum_entropy: e.target.checked
                          }))}
                          className="rounded border-gray-300"
                          disabled={formatOptions.encryption_type === 'basic_luks2'}
                        />
                        <Label htmlFor="quantum_entropy" className={`text-sm ${formatOptions.encryption_type === 'basic_luks2' ? 'opacity-50' : ''}`}>
                          Quantum Entropy Generation {formatOptions.encryption_type === 'basic_luks2' ? '(Coming Soon)' : ''}
                        </Label>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="forward_secrecy"
                          checked={formatOptions.forward_secrecy}
                          onChange={(e) => setFormatOptions(prev => ({
                            ...prev,
                            forward_secrecy: e.target.checked
                          }))}
                          className="rounded border-gray-300"
                          disabled={formatOptions.encryption_type === 'basic_luks2'}
                        />
                        <Label htmlFor="forward_secrecy" className={`text-sm ${formatOptions.encryption_type === 'basic_luks2' ? 'opacity-50' : ''}`}>
                          Perfect Forward Secrecy {formatOptions.encryption_type === 'basic_luks2' ? '(Coming Soon)' : ''}
                        </Label>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="zero_knowledge_proof"
                          checked={formatOptions.zero_knowledge_proof}
                          onChange={(e) => setFormatOptions(prev => ({
                            ...prev,
                            zero_knowledge_proof: e.target.checked
                          }))}
                          className="rounded border-gray-300"
                          disabled={formatOptions.encryption_type === 'basic_luks2'}
                        />
                        <Label htmlFor="zero_knowledge_proof" className={`text-sm ${formatOptions.encryption_type === 'basic_luks2' ? 'opacity-50' : ''}`}>
                          Zero-Knowledge Proofs {formatOptions.encryption_type === 'basic_luks2' ? '(Coming Soon)' : ''}
                        </Label>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="backup_keys"
                          checked={formatOptions.backup_keys}
                          onChange={(e) => setFormatOptions(prev => ({
                            ...prev,
                            backup_keys: e.target.checked
                          }))}
                          className="rounded border-gray-300"
                          disabled={formatOptions.encryption_type === 'basic_luks2'}
                        />
                        <Label htmlFor="backup_keys" className={`text-sm ${formatOptions.encryption_type === 'basic_luks2' ? 'opacity-50' : ''}`}>
                          Quantum Backup Keys {formatOptions.encryption_type === 'basic_luks2' ? '(Coming Soon)' : ''}
                        </Label>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="compression"
                          checked={formatOptions.compression}
                          onChange={(e) => setFormatOptions(prev => ({
                            ...prev,
                            compression: e.target.checked
                          }))}
                          className="rounded border-gray-300"
                          disabled={formatOptions.encryption_type === 'basic_luks2'}
                        />
                        <Label htmlFor="compression" className={`text-sm ${formatOptions.encryption_type === 'basic_luks2' ? 'opacity-50' : ''}`}>
                          Quantum Compression {formatOptions.encryption_type === 'basic_luks2' ? '(Coming Soon)' : ''}
                        </Label>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="quantum_key_distribution"
                          checked={formatOptions.quantum_key_distribution}
                          onChange={(e) => setFormatOptions(prev => ({
                            ...prev,
                            quantum_key_distribution: e.target.checked
                          }))}
                          className="rounded border-gray-300"
                          disabled={formatOptions.encryption_type === 'basic_luks2'}
                        />
                        <Label htmlFor="quantum_key_distribution" className={`text-sm ${formatOptions.encryption_type === 'basic_luks2' ? 'opacity-50' : ''}`}>
                          Quantum Key Distribution (QKD) {formatOptions.encryption_type === 'basic_luks2' ? '(Coming Soon)' : ''}
                        </Label>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="airgap_mode"
                          checked={formatOptions.airgap_mode}
                          onChange={(e) => setFormatOptions(prev => ({
                            ...prev,
                            airgap_mode: e.target.checked
                          }))}
                          className="rounded border-gray-300"
                          disabled={formatOptions.encryption_type === 'basic_luks2'}
                        />
                        <Label htmlFor="airgap_mode" className={`text-sm ${formatOptions.encryption_type === 'basic_luks2' ? 'opacity-50' : ''}`}>
                          Air-Gap Security Mode {formatOptions.encryption_type === 'basic_luks2' ? '(Coming Soon)' : ''}
                        </Label>
                      </div>
                    </div>
                    
                    <div className={`p-3 rounded border ${formatOptions.encryption_type === 'basic_luks2' ? 'bg-gray-50 border-gray-200' : 'bg-blue-50 border-blue-200'}`}>
                      <div className={`flex items-center gap-2 mb-1 ${formatOptions.encryption_type === 'basic_luks2' ? 'text-gray-700' : 'text-blue-700'}`}>
                        <span className="text-sm font-medium">🛡️ Protection Level</span>
                      </div>
                      <div className={`text-xs ${formatOptions.encryption_type === 'basic_luks2' ? 'text-gray-600' : 'text-blue-600'}`}>
                        {formatOptions.encryption_type === 'basic_luks2'
                          ? "🔐 Basic LUKS2 Encryption - Standard AES-256 protection (Available Now)"
                          : formatOptions.quantum_entropy && formatOptions.zero_knowledge_proof && formatOptions.forward_secrecy
                          ? "🔒 Maximum Quantum Resistance - Protected against quantum computer attacks"
                          : formatOptions.quantum_entropy || formatOptions.zero_knowledge_proof
                          ? "🔐 High Quantum Resistance - Strong protection with quantum features"
                          : "⚠️ Basic Protection - Consider enabling quantum features for future-proofing"
                        }
                      </div>
                    </div>
                  </div>

                  {formatProgress?.isActive && (
                    <div className="space-y-4">
                      <div className="flex items-center justify-between text-sm">
                        <span className="font-medium">{formatProgress.stage}</span>
                        <span>{formatProgress.progress}%</span>
                      </div>
                      <Progress value={formatProgress.progress} className="w-full" />
                      <p className="text-sm text-muted-foreground">{formatProgress.message}</p>
                    </div>
                  )}

                  <div className="flex justify-end space-x-4 pt-4 border-t">
                    <Button
                      variant="outline"
                      onClick={() => {
                        setShowFormatSection(false);
                        setFormatProgress(null);
                      }}
                      disabled={formatProgress?.isActive}
                    >
                      Cancel
                    </Button>
                    <Button
                      onClick={handleFormatDrive}
                      disabled={
                        operationInProgress ||
                        !formatOptions.password ||
                        formatOptions.password !== formatOptions.confirm_password ||
                        formatProgress?.isActive
                      }
                      className="bg-red-600 hover:bg-red-700"
                    >
                      {formatProgress?.isActive ? 'Encrypting...' : 'Format & Encrypt Drive'}
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}

          {/* Backup Management */}
          <Card>
            <CardHeader>
              <CardTitle>Backup Management</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-medium">Vault Backups</p>
                  <p className="text-sm text-muted-foreground">
                    {drive.backup_count} backups stored on this drive
                  </p>
                </div>
                <Button onClick={() => setShowBackupDialog(true)}>
                  <Download className="w-4 h-4 mr-2" />
                  Create Backup
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Backup Dialog */}
        <Dialog open={showBackupDialog} onOpenChange={setShowBackupDialog}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Create Backup</DialogTitle>
              <DialogDescription>
                Create a quantum-safe backup of your vault data to this USB drive.
              </DialogDescription>
            </DialogHeader>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowBackupDialog(false)}>
                Cancel
              </Button>
              <Button onClick={() => setShowBackupDialog(false)}>
                Create Backup
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Trust Dialog */}
        <Dialog open={showTrustDialog} onOpenChange={setShowTrustDialog}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Manage Trust Level</DialogTitle>
            </DialogHeader>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowTrustDialog(false)}>
                Cancel
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </ErrorBoundary>
  );
};

export default UsbDriveDetailPage;
